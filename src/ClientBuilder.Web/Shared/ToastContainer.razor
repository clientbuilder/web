@using ClientBuilder.Web.Helpers.Bootstrap
@inject IBootstrapService BootstrapService
@inject IJSRuntime JS

<div class="toast-container bottom-0 end-0 position-absolute p-3">
    @foreach (var toast in Toasts)
    {
        <div class="toast text-white align-items-center bg-@toast.Variant" id="@toast.Id" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body text-white">
                    @toast.Message
                </div>
                <button type="button" class="btn-close btn-close btn btn-@toast.Variant me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }
</div>

@code {

    private DotNetObjectReference<ToastContainer> objectReference;
    
    private IEnumerable<Toast> Toasts => BootstrapService.Toasts;

    [JSInvokable]
    public void RemoveToast(string toastId)
    {
        BootstrapService.RemoveToast(toastId);
        StateHasChanged();
    }
    
    public void Dispose()
    {
        objectReference?.Dispose();
    }

    protected override void OnInitialized()
    {
        this.objectReference = DotNetObjectReference.Create(this);
        BootstrapService.HasStateChange += (_, _) => StateHasChanged();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        var toastsForExecution = BootstrapService.Toasts.Where(x => !x.Executed);
        foreach (var toast in toastsForExecution)
        {
            toast.Executed = true;
            await JS.InvokeVoidAsync("showToast", toast.Id, this.objectReference);
        }
    }
}