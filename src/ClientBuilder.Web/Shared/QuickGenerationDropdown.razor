@inject IApplicationStore Store
@inject IBootstrapService BootstrapService

@if (SelectedApplicationId != Guid.Empty)
{
    <div class="dropdown" id="quick-generation">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="quick-generation-dropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="mdi mdi-application-braces"></i> @Applications.First(x => x.Id == SelectedApplicationId).Name
        </button>
        <div class="dropdown-menu">
            <p class="menu-text">Generation Sources</p>
            <ul aria-labelledby="quick-generation-dropdown">
                @foreach (var application in Applications)
                {
                    <li class="menu-li">
                        <a class="dropdown-item @(application.Id == SelectedApplicationId ? "active" : string.Empty)"
                           @onclick="async () => await SelectApplicationAsync(application.Id)">
                            <i class="mdi mdi-application-braces"></i> @application.Name
                        </a>
                    </li>
                }
            </ul>
        </div>
        <button class="btn btn-primary ms-0 ms-lg-1" type="button">
            <i class="mdi mdi-motion-play"></i> Generate
        </button>
    </div>
}

@code {
    private Guid SelectedApplicationId => Store.SelectedApplicationId;

    private IEnumerable<Application> Applications => Store.Applications;

    protected override Task OnInitializedAsync()
    {
        Store.ApplicationChanged += (_, _) =>
        {
            StateHasChanged();
        };

        return base.OnInitializedAsync();
    }

    private async Task SelectApplicationAsync(Guid applicationId)
    {
        if (SelectedApplicationId != applicationId)
        {
            await Store.SelectApplicationAsync(applicationId);

            var currentApplication = Applications.FirstOrDefault(x => x.Id == applicationId);
            BootstrapService.ShowToast($"{currentApplication?.Name} has been selected", "info");
        }
    }
}