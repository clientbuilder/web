@page "/sources"
@inject IApplicationStore Store
@inject IBootstrapService BootstrapService

<PageTitle>Sources | Client Builder</PageTitle>

<TitleSection Title="Register your applications" ShowAlert="true">
    Sources are the applications from which the Client Builder consumes the rendering logic. On the form below you can 
    find an easy way to register as many applications as you need.
</TitleSection>

<div class="my-2 d-flex">
    <div class="d-flex w-100">
        <h4 class="ms-0 me-auto fw-bold my-auto">Applications</h4>
        <button type="button" class="btn btn-primary my-auto ms-auto me-0" @onclick="() => SelectApplicationForMutationAsync(new ApplicationDto())">
            Add Application
        </button>
    </div>

    <div class="modal fade" id="app-form-modal" tabindex="-1" aria-labelledby="app-form-modal-label" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Application Form</h5>
                    <button type="button" class="btn-close btn btn-primary" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <EditForm Model="@currentApplicationEditModel" OnValidSubmit="SaveModelAsync" class="modal-content">
                    <DataAnnotationsValidator/>
                    <div class="modal-body">
                        <div>
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText class="form-control" placeholder="My Application" @bind-Value="@currentApplicationEditModel.Name"/>
                                <div class="invalid-feedback d-block">
                                    <ValidationMessage For="() => currentApplicationEditModel.Name"/>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Url</label>
                                <InputText class="form-control" placeholder="http://localhost:1234" @bind-Value="@currentApplicationEditModel.Url"/>
                                <div class="invalid-feedback d-block">
                                    <ValidationMessage For="() => currentApplicationEditModel.Url"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (Applications.Any())
{
    <div class="table-responsive">
        <table class="table">
            <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Url</th>
                <th scope="col" class="fit">Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var application in Applications)
            {
                <tr>
                    <td>@application.Name</td>
                    <td>@application.Url</td>
                    <td class="fit d-flex w-100">
                        <div class="d-flex ms-auto me-0">
                            <button class="ms-0 w-auto btn btn-primary" disabled="@(application.Id == SelectedApplicationId)" @onclick="() => SelectApplicationAsync(application.Id)">
                                Select@(application.Id == SelectedApplicationId ? "ed" : string.Empty)
                            </button>
                            <button class="ms-1 w-auto btn btn-primary" @onclick="() => SelectApplicationForMutationAsync(application)">Edit</button>
                            <button class="ms-1 w-auto btn btn-primary" @onclick="() => DeleteApplicationAsync(application.Id)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <Alert>
        There are no registered applications. Use the button above to register an application.
    </Alert>
}

@code {
    private ApplicationDto currentApplicationEditModel = new();

    private Guid SelectedApplicationId => Store.SelectedApplicationId;

    private IEnumerable<ApplicationDto> Applications => this.Store.Applications.Select(x => new ApplicationDto(x));

    protected override async Task OnInitializedAsync()
    {
        Store.ApplicationChanged += (_, _) => { StateHasChanged(); };
        await base.OnInitializedAsync();
    }

    private async Task SaveModelAsync()
    {
        try
        {
            await Store.SaveApplicationAsync(new Application
            {
                Name = this.currentApplicationEditModel.Name,
                Url = this.currentApplicationEditModel.Url,
            });

            await BootstrapService.CloseModalAsync("app-form-modal");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task DeleteApplicationAsync(Guid applicationId)
    {
        await Store.DeleteApplicationAsync(applicationId);
    }

    private async Task SelectApplicationAsync(Guid applicationId)
    {
        var currentApplication = Applications.FirstOrDefault(x => x.Id == applicationId);
        await Store.SelectApplicationAsync(applicationId);
        
        BootstrapService.ShowToast($"{currentApplication?.Name} has been selected", "info");
    }

    private async Task SelectApplicationForMutationAsync(ApplicationDto application)
    {
        this.currentApplicationEditModel = application;
        await BootstrapService.ShowModalAsync("app-form-modal");
    }

}